; Function Prologue
push {r11, lr}                  ; Save r11 and link register
mov r11, sp                     ; Set frame pointer

; --- Initial Setup and Size Calculation ---
; Calculates 'total_size' = (0x40101221 - 0x40100138) = 0x10E9 (4329 bytes)
movw r2, #312 @ 0x138           ; r2 = 0x00000138
movw lr, #4641 @ 0x1221         ; lr = 0x00001221
movt r2, #16400 @ 0x4010        ; r2 = 0x40100138 (Source/Destination Base Address 1)
movt lr, #16400 @ 0x4010        ; lr = 0x40101221 (End Address)
sub r1, lr, r2                  ; r1 = lr - r2 (total_size, 0x10E9)

; --- Initial Size Checks ---
cmp r1, #1                      ; if total_size < 1 (i.e., 0 or negative)
blt 0xec <kboot+232>            ;   branch to error/exit handler (end of function)

mov r0, #0                      ; r0 = 0 (likely bytes copied so far, or a loop counter for the NEON part)
cmp r1, #8                      ; if total_size < 8
bcc 0xc0 <kboot+188>            ;   branch to handling for small remaining bytes (byte-by-byte copy)
cmp r1, #32                     ; if total_size < 32
bcc 0x80 <kboot+124>            ;   branch to handling for medium remaining bytes (8-byte NEON copy)

; --- Main NEON 32-byte Copy Loop (if total_size >= 32) ---
; This loop copies 32 bytes at a time using two NEON vld1/vst1 operations.
; Source: 0x00000138 (incremented)
; Destination: 0x40100138 (incremented)

movw r3, #312 @ 0x138           ; r3 = 0x00000138 (Base for Source 2)
bic r0, r1, #31                 ; r0 = (total_size & ~31) = total_size aligned down to 32-byte boundary.
                                ; This calculates the number of bytes to copy in 32-byte chunks.
movt r3, #0                     ; r3 = 0x00000138 (Actual start address for reading from)
mov r1, r0                      ; r1 = aligned_total_size (loop counter for 32-byte chunks)

; Loop body for 32-byte copies
0x4c <kboot+72>: ; Loop start
vld1.8 {d16-d17}, [r3]!         ; Load 16 bytes (d16, d17) from [r3], then r3 += 16
subs r1, r1, #32                ; Subtract 32 from counter r1. Update flags.
vld1.8 {d18-d19}, [r3]!         ; Load another 16 bytes (d18, d19) from [r3], then r3 += 16
vst1.8 {d16-d17}, [r2]!         ; Store 16 bytes (d16, d17) to [r2], then r2 += 16
vst1.8 {d18-d19}, [r2]!         ; Store another 16 bytes (d18, d19) to [r2], then r2 += 16
bne 0x4c <kboot+72>             ; Branch if r1 != 0 (loop until all 32-byte chunks are copied)

; --- Post-loop handling for remaining bytes (less than 32, but >= 8) ---
; This block is executed if `total_size` was initially < 32, OR after the 32-byte loop finishes.
; It copies 8 bytes at a time using a single NEON vld1/vst1 operation.
0x80 <kboot+124>: ; Entry point for sizes < 32
; Recalculate remaining bytes to copy after 32-byte chunks
movw r1, #312 @ 0x138           ; r1 = 0x00000138 (reset for base address)
movt r1, #16400 @ 0x4010        ; r1 = 0x40100138 (Destination Base)
sub r1, lr, r1                  ; r1 = (end_address - current_destination_address) = remaining bytes.
                                ; This r1 is the *original* total_size MINUS the bytes already copied.
cmp r0, r1                      ; Compare r0 (bytes copied in 32-byte chunks) with r1 (remaining bytes).
                                ; This effectively checks if (original_total_size % 32) is zero or if a new calculation is needed.
beq 0xec <kboot+232>            ; If equal, all bytes were copied in 32-byte chunks, branch to end.
tst r1, #24                     ; Test if remaining bytes have bits 3, 4, 5 set (i.e., >= 8 bytes)
                                ; This is an indirect check for remaining bytes >= 8.
beq 0xc0 <kboot+188>            ; If less than 8 bytes remaining, branch to byte-by-byte copy.

movw r3, #312 @ 0x138           ; r3 = 0x00000138 (Base for Source 2)
movw r1, #312 @ 0x138           ; r1 = 0x00000138 (Base for Source 1, also starts at 0x00000138 initially)
movt r3, #16400 @ 0x4010        ; r3 = 0x40100138 (Destination for 8-byte copies)
movt r1, #0                     ; r1 = 0x00000138 (Source for 8-byte copies)
sub r12, lr, r3                 ; r12 = (end_address - current_destination_address) = total remaining bytes.
add r2, r3, r0                  ; r2 = (destination base + bytes_copied_in_32_byte_chunks) = actual current destination address.
bic r3, r12, #7                 ; r3 = (total_remaining_bytes & ~7) = total_remaining_bytes aligned down to 8-byte boundary.
                                ; This calculates the number of bytes to copy in 8-byte chunks.
add r1, r1, r0                  ; r1 = (source base + bytes_copied_in_32_byte_chunks) = actual current source address.
sub r0, r0, r3                  ; r0 = (bytes_copied_in_32_byte_chunks - bytes_to_copy_in_8_byte_chunks)
                                ; This is slightly confusing, but it looks like r0 is being repurposed as a negative loop counter.

; Loop body for 8-byte copies
0xa4 <kboot+160>: ; Loop start
vld1.8 {d16}, [r1]!             ; Load 8 bytes (d16) from [r1], then r1 += 8
adds r0, r0, #8                 ; Add 8 to r0. Update flags. (r0 moves towards zero from a negative value)
vst1.8 {d16}, [r2]!             ; Store 8 bytes (d16) to [r2], then r2 += 8
bne 0xa4 <kboot+160>            ; Branch if r0 != 0 (loop until all 8-byte chunks are copied)

; --- Post-loop handling for remaining bytes (less than 8, but >= 1) ---
; This block handles the final few bytes (1-7 bytes) if any remain.
0xc0 <kboot+188>: ; Entry point for sizes < 8
cmp r3, r12                     ; Compare r3 (bytes copied in 8-byte chunks) with r12 (total remaining bytes).
mov r0, r3                      ; r0 = r3
beq 0xec <kboot+232>            ; If equal, all bytes were copied, branch to end.

movw r1, #312 @ 0x138           ; r1 = 0x00000138 (Source base)
movt r1, #0                     ; r1 = 0x00000138
add r2, r1, r0                  ; r2 = (source base + bytes_copied_in_8_byte_chunks) = actual current source address.
movw r1, #312 @ 0x138           ; r1 = 0x00000138 (Destination base)
movt r1, #16400 @ 0x4010        ; r1 = 0x40100138
add r0, r0, r1                  ; r0 = (destination base + bytes_copied_in_8_byte_chunks) = actual current destination address.
sub r1, r0, lr                  ; r1 = (current_destination - end_address) - this seems to be a negative counter.
                                ; Or: (current_destination_address - end_address) is negative, so r1 will be a negative value.
                                ; When r1 reaches 0 (or positive depending on conditions), it means all bytes have been copied.

; Loop body for byte-by-byte copies
0xdc <kboot+216>: ; Loop start
ldrb r3, [r2], #1               ; Load byte from [r2], then r2 += 1
adds r1, r1, #1                 ; Add 1 to r1. Update flags.
strb r3, [r0], #1               ; Store byte to [r0], then r0 += 1
bcc 0xdc <kboot+216>            ; Branch if carry clear (i.e., r1 is still negative or zero), continue loop.
                                ; This loop copies until r1 becomes positive (meaning it has copied enough bytes).

; --- Function Epilogue / Exit Points ---
0xec <kboot+232>: ; Exit point for various conditions
ldr pc, [pc] @ 0xf4             ; This is a jump table or a literal pool load.
                                ; It's highly unusual to see `ldr pc, [pc]` at the end of a function prologue unless it's a tail call,
                                ; but here it's an unconditional jump. This might be a placeholder for a different function call
                                ; or a jump to an exception handler/error routine if the copy failed.
                                ; Or, it could be loading a return address from a literal pool.

pop {r11, pc}                   ; Restore r11 and pop the saved link register (lr) into pc, which returns from the function.
                                ; This line is effectively unreachable if the `ldr pc, [pc]` instruction is executed.
                                ; This suggests there might be multiple exit paths or conditional execution not immediately obvious.